import { create } from 'zustand';
import { db } from './db';
import { FolderWatcher } from './services/FolderWatcher';

interface FormPage {
  id: number;
  form_id: number;
  page_number: number;
  image_data: Buffer;
}

interface FormField {
  id: number;
  form_id: number;
  label: string;
  page_number: number;
  x: number;
  y: number;
  width: number;
  height: number;
}

interface Form {
  id: number;
  name: string;
  folder_path: string;
  last_modified: Date;
  pages: string[];
  fields: FormField[];
  isNew?: boolean;
}

interface FormStore {
  mode: 'admin' | 'assessor';
  forms: Form[];
  selectedFolder: string | null;
  searchQuery: string;
  setMode: (mode: 'admin' | 'assessor') => void;
  setSelectedFolder: (path: string) => Promise<void>;
  loadForms: () => Promise<void>;
  searchForms: (query: string) => Promise<void>;
  updateForm: (formId: number, updates: Partial<Form>) => Promise<void>;
  addFormField: (formId: number, field: Omit<FormField, 'id'> & { form_id: number }) => Promise<void>;
}

export const useFormStore = create<FormStore>((set, get) => ({
  mode: 'admin',
  forms: [],
  selectedFolder: null,
  searchQuery: '',

  setMode: (mode) => set({ mode }),

  setSelectedFolder: async (path: string) => {
    const watcher = FolderWatcher.getInstance();
    await watcher.startWatching(path);
    set({ selectedFolder: path });
    await get().loadForms();
  },

  loadForms: async () => {
    try {
      const forms = await db.getForms();
      const formsWithDetails = await Promise.all(
        forms.map(async (form: Form) => {
          const pages = await db.getFormPages(form.id);
          const fields = await db.getFormFields(form.id);
          
          return {
            ...form,
            pages: pages.map((p: FormPage) => `data:image/png;base64,${p.image_data.toString('base64')}`),
            fields: fields,
            isNew: new Date().getTime() - form.last_modified.getTime() < 24 * 60 * 60 * 1000 // Highlight if updated in last 24h
          };
        })
      );
      
      set({ forms: formsWithDetails });
    } catch (error) {
      console.error('Error loading forms:', error);
    }
  },

  searchForms: async (query: string) => {
    try {
      set({ searchQuery: query });
      const forms = await db.searchForms(query);
      const formsWithDetails = await Promise.all(
        forms.map(async (form: Form) => {
          const pages = await db.getFormPages(form.id);
          const fields = await db.getFormFields(form.id);
          
          return {
            ...form,
            pages: pages.map((p: FormPage) => `data:image/png;base64,${p.image_data.toString('base64')}`),
            fields: fields,
            isNew: new Date().getTime() - form.last_modified.getTime() < 24 * 60 * 60 * 1000
          };
        })
      );
      
      set({ forms: formsWithDetails });
    } catch (error) {
      console.error('Error searching forms:', error);
    }
  },

  updateForm: async (formId: number, updates: Partial<Form>) => {
    try {
      await db.updateForm(formId, updates);
      await get().loadForms();
    } catch (error) {
      console.error('Error updating form:', error);
    }
  },

  addFormField: async (formId: number, field: Omit<FormField, 'id'> & { form_id: number }) => {
    try {
      await db.saveFormField(formId, field);
      await get().loadForms();
    } catch (error) {
      console.error('Error adding form field:', error);
    }
  },
}));
