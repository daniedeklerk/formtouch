interface Form {
  id: number;
  name: string;
  folder_path: string;
  last_modified: Date;
}

type WebSocketMessage = {
  type: 'watch' | 'unwatch' | 'add' | 'update';
  folderPath?: string;
  form?: Form;
};

class WebSocketError extends Error {
  constructor(message: string) {
    super(message);
    this.name = 'WebSocketError';
  }
}

export class FolderWatcher {
  private ws: WebSocket | null = null;
  private static instance: FolderWatcher;
  private folderPath: string | null = null;
  private reconnectAttempts = 0;
  private maxReconnectAttempts = 5;
  private reconnectTimeout: NodeJS.Timeout | null = null;

  private constructor() {}

  static getInstance(): FolderWatcher {
    if (!FolderWatcher.instance) {
      FolderWatcher.instance = new FolderWatcher();
    }
    return FolderWatcher.instance;
  }

  private async connectWebSocket(folderPath: string): Promise<void> {
    return new Promise<void>((resolve, reject) => {
      try {
        this.ws = new WebSocket(process.env.NEXT_PUBLIC_WS_URL || 'ws://localhost:3001');

        this.ws.onopen = () => {
          this.reconnectAttempts = 0;
          if (this.ws && this.ws.readyState === WebSocket.OPEN) {
            this.ws.send(JSON.stringify({ type: 'watch', folderPath }));
            resolve();
          }
        };

        this.ws.onmessage = (event) => {
          try {
            const data = JSON.parse(event.data) as WebSocketMessage;
            if (data.type === 'add' && data.form) {
              console.log(`Added new form: ${data.form.name}`);
            } else if (data.type === 'update' && data.form) {
              console.log(`Updated form: ${data.form.name}`);
            }
          } catch (error) {
            console.error('Error processing WebSocket message:', error);
          }
        };

        this.ws.onerror = (error) => {
          console.error('WebSocket error:', error);
          this.attemptReconnect(folderPath);
          reject(error);
        };

        this.ws.onclose = () => {
          console.log('WebSocket connection closed');
          this.attemptReconnect(folderPath);
        };
      } catch (error) {
        console.error('Error creating WebSocket:', error);
        reject(error);
      }
    });
  }

  private attemptReconnect(folderPath: string): void {
    if (this.reconnectAttempts < this.maxReconnectAttempts) {
      this.reconnectAttempts++;
      const delay = Math.min(1000 * Math.pow(2, this.reconnectAttempts), 30000);
      
      if (this.reconnectTimeout) {
        clearTimeout(this.reconnectTimeout);
      }

      this.reconnectTimeout = setTimeout(() => {
        console.log(`Attempting to reconnect (${this.reconnectAttempts}/${this.maxReconnectAttempts})...`);
        this.connectWebSocket(folderPath).catch(console.error);
      }, delay);
    }
  }

  async startWatching(folderPath: string): Promise<void> {
    if (this.ws) {
      await this.stopWatching();
    }

    this.folderPath = folderPath;
    return this.connectWebSocket(folderPath);
  }

  async stopWatching(): Promise<void> {
    if (this.reconnectTimeout) {
      clearTimeout(this.reconnectTimeout);
      this.reconnectTimeout = null;
    }

    if (this.ws) {
      try {
        if (this.ws.readyState === WebSocket.OPEN && this.folderPath) {
          this.ws.send(JSON.stringify({ 
            type: 'unwatch', 
            folderPath: this.folderPath 
          } as WebSocketMessage));
        }
        this.ws.close();
      } catch (error) {
        console.error('Error closing WebSocket:', error);
      } finally {
        this.ws = null;
        this.folderPath = null;
      }
    }
  }

  static getInstance(): FolderWatcher {
    if (!FolderWatcher.instance) {
      FolderWatcher.instance = new FolderWatcher();
    }
    return FolderWatcher.instance;
  }

  private async connectWebSocket(folderPath: string): Promise<void> {
    return new Promise((resolve, reject) => {
      try {
        this.ws = new WebSocket(process.env.NEXT_PUBLIC_WS_URL || 'ws://localhost:3001');

        this.ws.onopen = () => {
          this.reconnectAttempts = 0;
          if (this.ws && this.ws.readyState === WebSocket.OPEN) {
            this.ws.send(JSON.stringify({ type: 'watch', folderPath }));
            resolve();
          }
        };

        this.ws.onmessage = (event) => {
          try {
            const data = JSON.parse(event.data);
            if (data.type === 'add') {
              console.log(`Added new form: ${data.form.name}`);
            } else if (data.type === 'update') {
              console.log(`Updated form: ${data.form.name}`);
            }
          } catch (error) {
            console.error('Error processing WebSocket message:', error);
          }
        };

        this.ws.onerror = (error) => {
          console.error('WebSocket error:', error);
          this.attemptReconnect(folderPath);
          reject(error);
        };

        this.ws.onclose = () => {
          console.log('WebSocket connection closed');
          this.attemptReconnect(folderPath);
        };
      } catch (error) {
        console.error('Error creating WebSocket:', error);
        reject(error);
      }
    });
  }

  private attemptReconnect(folderPath: string) {
    if (this.reconnectAttempts < this.maxReconnectAttempts) {
      this.reconnectAttempts++;
      const delay = Math.min(1000 * Math.pow(2, this.reconnectAttempts), 30000);
      
      if (this.reconnectTimeout) {
        clearTimeout(this.reconnectTimeout);
      }

      this.reconnectTimeout = setTimeout(() => {
        console.log(`Attempting to reconnect (${this.reconnectAttempts}/${this.maxReconnectAttempts})...`);
        this.connectWebSocket(folderPath).catch(console.error);
      }, delay);
    }
  }

  async startWatching(folderPath: string): Promise<void> {
    if (this.ws) {
      await this.stopWatching();
    }

    this.folderPath = folderPath;
    return this.connectWebSocket(folderPath);
  }

  async stopWatching(): Promise<void> {
    if (this.reconnectTimeout) {
      clearTimeout(this.reconnectTimeout);
      this.reconnectTimeout = null;
    }

    if (this.ws) {
      try {
        if (this.ws.readyState === WebSocket.OPEN && this.folderPath) {
          this.ws.send(JSON.stringify({ type: 'unwatch', folderPath: this.folderPath }));
        }
        this.ws.close();
      } catch (error) {
        console.error('Error closing WebSocket:', error);
      }
      this.ws = null;
      this.folderPath = null;
    }
  }
    };
  }

  async stopWatching(): Promise<void> {
    if (this.ws) {
      if (this.ws.readyState === WebSocket.OPEN && this.folderPath) {
        this.ws.send(JSON.stringify({ type: 'unwatch', folderPath: this.folderPath }));
      }
      this.ws.close();
      this.ws = null;
      this.folderPath = null;
    }
  }
}
